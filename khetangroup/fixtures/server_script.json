[
 {
  "allow_guest": 0,
  "api_method": "weight",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.327963",
  "module": "khetangroup",
  "name": "Weight",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"item\"]\r\rdata = frappe.db.sql(\"\"\"  select weight_special_customer from `tabItem` where name=%s \"\"\",a)\r\rlist = \"\"\rfor i in data:\r    for j in i:\r        if list == \"\":\r            list = j\r            \rfrappe.response[\"msg\"]=list",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "cus_name",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.345403",
  "module": "khetangroup",
  "name": "Customer Type Fetch",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"cus_name\"]\rsubject = frappe.db.get_value('Customer', a, 'customer_group')\rfrappe.response[\"msg\"]=subject",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "inches",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.452371",
  "module": "khetangroup",
  "name": "fetch values to Quotation Item",
  "reference_doctype": null,
  "script": "frappe.response[\"item\"]=frappe.get_doc(\"Item\",frappe.form_dict[\"item_code\"])\r\r# a = frappe.form_dict[\"item_code\"]\r\r# data = frappe.db.sql(\"\"\"  select size from `tabItem` where name=%s \"\"\",a);\r# grade = frappe.db.get_value('Item', a, 'grade');\r# shape_type = frappe.db.get_value('Item', a, 'shape_type');\r# thickness = frappe.db.get_value('Item', a, 'thickness');\r# company = frappe.db.get_value('Item', a, 'company');\r# # default_set = frappe.db.get_value('Item', a, 'default_set');\r# color = frappe.db.get_value('Item', a, 'color');\r# products_type = frappe.db.get_value('Item', a, 'products_type');\r# item_type = frappe.db.get_value('Item', a, 'item_type');\r# normal_margin = frappe.db.get_value('Item', a, 'normal_margin');\r# special_margin = frappe.db.get_value('Item', a, 'special_margin');\r# item_main = frappe.db.get_value('Item', a, 'item_main');\r# # frappe.msgprint(color);\r# list = \"\"\r# for i in data:\r#     for j in i:\r#         if list == \"\":\r#             list = j\r            \r# frappe.response[\"msg\"]=list\r# frappe.response[\"grade\"]=grade\r# frappe.response[\"shape_type\"]=shape_type\r# frappe.response[\"thickness\"]=thickness\r# frappe.response[\"company\"]=company\r# # frappe.response[\"default_set\"]=default_set\r# frappe.response[\"color\"]=color\r# frappe.response[\"products_type\"]=products_type\r# frappe.response[\"item_type\"]=item_type\r# frappe.response[\"normal_margin\"]=normal_margin\r# frappe.response[\"special_margin\"]=special_margin\r# frappe.response[\"item_main\"]=item_main",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "send_value",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.336162",
  "module": "khetangroup",
  "name": "Send Weight Difference in Quotation",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"we_diff\"]\rfrappe.response[\"msg\"]=a",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "voucher_no",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.353712",
  "module": "khetangroup",
  "name": "voucher_no",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"no\"]\n\n\nitem = frappe.db.sql(\"\"\" select item_code from `tabDelivery Note Item` where parent=%s \"\"\",a)\nqty = frappe.db.sql(\"\"\"  select qty from `tabDelivery Note Item` where parent=%s \"\"\",a)\nrate = frappe.db.sql(\"\"\"  select rate from `tabDelivery Note Item` where parent=%s \"\"\",a)\namount = frappe.db.sql(\"\"\"  select amount from `tabDelivery Note Item` where parent=%s \"\"\",a)\nstock_uom = frappe.db.sql(\"\"\"  select stock_uom from `tabDelivery Note Item` where parent=%s \"\"\",a)\nuom = frappe.db.sql(\"\"\"  select uom from `tabDelivery Note Item` where parent=%s \"\"\",a)\nitem_name = frappe.db.sql(\"\"\"  select item_name from `tabDelivery Note Item` where parent=%s \"\"\",a)\ndescription = frappe.db.sql(\"\"\"  select description from `tabDelivery Note Item` where parent=%s \"\"\",a)\nitem1 = \"\"\nfor i in item:\n    for j in i:\n        if item1 == \"\":\n            item1 = j\n        else:\n            item1 = item1 + \",\" + j\n            \n# frappe.msgprint(item1)\n \n\n\nqty1 = \"\"\nfor a in qty:\n    for b in a:\n        if qty1 == \"\":\n            qty1 = b\n        else:\n            qty1 = f'{qty1}{\",\"}{b}'\nqty2 = str(qty1)\n# frappe.msgprint(qty2)      \n            \nrate1 = \"\"\nfor c in rate:\n    for d in c:\n        if rate1 == \"\":\n            rate1 = d\n        else:\n            rate1 = f'{rate1}{\",\"}{d}'\nrate2 = str(rate1)           \n# frappe.msgprint(rate2)\n\n            \n            \namount1 = \"\"\nfor m in amount:\n    for n in m:\n        if amount1 == \"\":\n            amount1 = n\n        else:\n            amount1 = f'{amount1}{\",\"}{n}'\n            \namount2 =str(amount1)\n# frappe.msgprint(amount2)\n\n            \nstock_uom1 = \"\"\nfor y in stock_uom:\n    for x in y:\n        if stock_uom1 == \"\":\n            stock_uom1 = x\n        else:\n            stock_uom1 = f'{stock_uom1}{\",\"}{x}'\nstock_uom2 = str(stock_uom1)            \n# frappe.msgprint(stock_uom2)\n            \nuom1 = \"\"\nfor q in uom:\n    for p in q:\n        if uom1 == \"\":\n            uom1 = p\n        else:\n            uom1 = f'{uom1}{\",\"}{p}'\nuom2 = str(uom1)   \n# frappe.msgprint(uom2)\nitem_name1 = \"\"\nfor r in item_name:\n    for z in r:\n        if item_name1 == \"\":\n            item_name1 = z\n        else:\n            item_name1 = f'{item_name1}{\",\"}{z}'\n\ndescription1 = \"\"\nfor d in description:\n    for e in d:\n        if description1 == \"\":\n            description1 = e\n        else:\n            description1 = f'{description1}{\",\"}{e}'\n\n\n\nfrappe.response[\"item\"]=item1\nfrappe.response[\"qty\"] = qty2\nfrappe.response[\"rate\"] = rate2\nfrappe.response[\"amount\"] = amount2\nfrappe.response[\"stock_uom\"] = stock_uom2\nfrappe.response[\"uom\"] = uom2\nfrappe.response[\"item_name\"] = item_name1\nfrappe.response[\"description\"] = description1\n\n\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "bluster_price",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.524558",
  "module": "khetangroup",
  "name": "Fetch Bluster Value From DB",
  "reference_doctype": null,
  "script": "mpillar11202= frappe.db.get_value('Item Type', '1.1 Master Pillar 202', 'master_price');\nmpillar13202= frappe.db.get_value('Item Type', '1.3 Master Pillar 202', 'master_price');\nmpillar15202= frappe.db.get_value('Item Type', '1.5 Master Pillar 202', 'master_price');\nmpillar17202= frappe.db.get_value('Item Type', '1.7 Master Pillar 202', 'master_price');\nmpillar22202= frappe.db.get_value('Item Type', '2.2 Master Pillar 202', 'master_price');\n\nmpillar11304= frappe.db.get_value('Item Type', '1.1 Master Pillar 304', 'master_price');\nmpillar13304= frappe.db.get_value('Item Type', '1.3 Master Pillar 304', 'master_price');\nmpillar15304= frappe.db.get_value('Item Type', '1.5 Master Pillar 304', 'master_price');\nmpillar17304= frappe.db.get_value('Item Type', '1.7 Master Pillar 304', 'master_price');\nmpillar22304= frappe.db.get_value('Item Type', '2.2 Master Pillar 304', 'master_price');\n\nrbgm55202= frappe.db.get_value('Item Type', '550 Grm R Blustor 202', 'master_price');\nrbgm65202= frappe.db.get_value('Item Type', '650 Grm R Blustor 202', 'master_price');\nrbgm70202= frappe.db.get_value('Item Type', '700 Grm R Blustor 202', 'master_price');\nrbgm90202= frappe.db.get_value('Item Type', '900 Grm R Blustor 202', 'master_price');\nrbgm110202= frappe.db.get_value('Item Type', '1100 Grm R Blustor 202', 'master_price');\n\nrbgm55304= frappe.db.get_value('Item Type', '550 Grm R Blustor 304', 'master_price');\nrbgm65304= frappe.db.get_value('Item Type', '650 Grm R Blustor 304', 'master_price');\nrbgm70304= frappe.db.get_value('Item Type', '700 Grm R Blustor 304', 'master_price');\nrbgm90304= frappe.db.get_value('Item Type', '900 Grm R Blustor 304', 'master_price');\nrbgm110304= frappe.db.get_value('Item Type', '1100 Grm R Blustor 304', 'master_price');\n\nsqbgm70202= frappe.db.get_value('Item Type', '700 Grm Sq Blustor 202', 'master_price');\nsqbgm65202= frappe.db.get_value('Item Type', '800 Grm Sq Blustor 202', 'master_price');\nsqbgm90202= frappe.db.get_value('Item Type', '900 Grm Sq Blustor 202', 'master_price');\nsqbgm110202= frappe.db.get_value('Item Type', '1100 Grm Sq Blustor 202', 'master_price');\n\nsqbgm70304= frappe.db.get_value('Item Type', '700 Grm Sq Blustor 304', 'master_price');\nsqbgm65304= frappe.db.get_value('Item Type', '800 Grm Sq Blustor 304', 'master_price');\nsqbgm90304= frappe.db.get_value('Item Type', '900 Grm Sq Blustor 304', 'master_price');\nsqbgm110304= frappe.db.get_value('Item Type', '1100 Grm Sq Blustor 304', 'master_price');\n\nfrappe.response[\"mpillar11202\"]=mpillar11202\nfrappe.response[\"mpillar13202\"]=mpillar13202\nfrappe.response[\"mpillar15202\"]=mpillar15202\nfrappe.response[\"mpillar17202\"]=mpillar17202\nfrappe.response[\"mpillar22202\"]=mpillar22202\n\nfrappe.response[\"mpillar11304\"]=mpillar11304\nfrappe.response[\"mpillar13304\"]=mpillar13304\nfrappe.response[\"mpillar15304\"]=mpillar15304\nfrappe.response[\"mpillar17304\"]=mpillar17304\nfrappe.response[\"mpillar22304\"]=mpillar22304\n\nfrappe.response[\"rbgm55202\"]=rbgm55202\nfrappe.response[\"rbgm65202\"]=rbgm65202\nfrappe.response[\"rbgm70202\"]=rbgm70202\nfrappe.response[\"rbgm90202\"]=rbgm90202\nfrappe.response[\"rbgm110202\"]=rbgm110202\n\nfrappe.response[\"rbgm55304\"]=rbgm55304\nfrappe.response[\"rbgm65304\"]=rbgm65304\nfrappe.response[\"rbgm70304\"]=rbgm70304\nfrappe.response[\"rbgm90304\"]=rbgm90304\nfrappe.response[\"rbgm110304\"]=rbgm110304\n\nfrappe.response[\"sqbgm70202\"]=sqbgm70202\nfrappe.response[\"sqbgm65202\"]=sqbgm65202\nfrappe.response[\"sqbgm90202\"]=sqbgm90202\nfrappe.response[\"sqbgm110202\"]=sqbgm110202\n\nfrappe.response[\"sqbgm70304\"]=sqbgm70304\nfrappe.response[\"sqbgm65304\"]=sqbgm65304\nfrappe.response[\"sqbgm90304\"]=sqbgm90304\nfrappe.response[\"sqbgm110304\"]=sqbgm110304",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "working_hours",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.485629",
  "module": "khetangroup",
  "name": "Fetch Working hours in Timesheet",
  "reference_doctype": null,
  "script": "from_date=frappe.form_dict['from_date']\nto_date=frappe.form_dict['to_date']\nemployee=frappe.form_dict['emp']\n\n\ntotHours = frappe.db.sql(f\"select sum(round(card_working_hours, 1)) as cardhour, sum(round(advance, 1)) as empadvance, employee, attendance_date from `tabCard Attendance` where employee='{ employee }' and attendance_date BETWEEN '{ from_date }' AND '{ to_date }' \",as_dict=1)\n\ncountPresent = frappe.db.sql(f\"select count(employee) as countpresent from `tabCard Attendance` where employee='{ employee }' and attendance_date BETWEEN '{ from_date }' AND '{ to_date }' and card_status='Present' \",as_dict=1)\npresentDays = countPresent[0].countpresent\n# frappe.msgprint(str(cardres))\n\ncountAbsent = frappe.db.sql(f\"select count(employee) as countabsent from `tabCard Attendance` where employee='{ employee }' and attendance_date BETWEEN '{ from_date }' AND '{ to_date }' and card_status='Absent' \",as_dict=1)\nabsentDays = countAbsent[0].countabsent\n# frappe.msgprint(str(cardres))\n\ncountHalfDay = frappe.db.sql(f\"select count(employee) as counthalfday from `tabCard Attendance` where employee='{ employee }' and attendance_date BETWEEN '{ from_date }' AND '{ to_date }' and card_status='Half Day' \",as_dict=1)\nhalfDays = countHalfDay[0].counthalfday\ntot_halfday = halfDays/2\n# frappe.msgprint(str(half_day))\n\ntot_present = presentDays+tot_halfday\n# frappe.msgprint(str(tot_present))\n\n\n\nfrappe.response['message'] = totHours;\nfrappe.response['msgpresnt'] = tot_present;\nfrappe.response['msgabsent'] = absentDays;\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "purchase_invoice",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.505504",
  "module": "khetangroup",
  "name": "purchase_invoice",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"no\"]\n\n\nitem = frappe.db.sql(\"\"\" select item_code from `tabPurchase Invoice Item` where parent=%s \"\"\",a)\nqty = frappe.db.sql(\"\"\"  select qty from `tabPurchase Invoice Item` where parent=%s \"\"\",a)\n\nitem1 = \"\"\nfor i in item:\n    for j in i:\n        if item1 == \"\":\n            item1 = j\n        else:\n            item1 = item1 + \",\" + j\n            \n# frappe.msgprint(item1)\n \n\n\nqty1 = \"\"\nfor a in qty:\n    for b in a:\n        if qty1 == \"\":\n            qty1 = b\n        else:\n            qty1 = f'{qty1}{\",\"}{b}'\nqty2 = str(qty1)\n# frappe.msgprint(qty2)      \n            \n\nfrappe.response[\"item\"]=item1\nfrappe.response[\"qty\"] = qty2\n\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "sales_invoice",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.494620",
  "module": "khetangroup",
  "name": "sales_invoice",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"no\"]\n\n\nitem = frappe.db.sql(\"\"\" select item_code from `tabSales Invoice Item` where parent=%s \"\"\",a)\nqty = frappe.db.sql(\"\"\"  select qty from `tabSales Invoice Item` where parent=%s \"\"\",a)\n\n\nitem1 = \"\"\nfor i in item:\n    for j in i:\n        if item1 == \"\":\n            item1 = j\n        else:\n            item1 = item1 + \",\" + j\n            \n# frappe.msgprint(item1)\n \n\n\nqty1 = \"\"\nfor a in qty:\n    for b in a:\n        if qty1 == \"\":\n            qty1 = b\n        else:\n            qty1 = f'{qty1}{\",\"}{b}'\nqty2 = str(qty1)\n# frappe.msgprint(qty2)      \n            \n\n\nfrappe.response[\"item\"]=item1\nfrappe.response[\"qty\"] = qty2\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "voucher_num",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.513999",
  "module": "khetangroup",
  "name": "voucher_num",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"no\"]\n\nitem = frappe.db.sql(\"\"\" select item_code from `tabStock Entry Detail` where parent=%s \"\"\",a)\nqty = frappe.db.sql(\"\"\" select qty from `tabStock Entry Detail` where parent=%s\"\"\",a)\n\n\nitem1 = \"\"\nfor i in item:\n    for j in i:\n        if item1 == \"\":\n            item1 = j\n        else:\n            item1 = item1 + \",\" + j\n\nqty1 = \"\"\nfor a in qty:\n    for b in a:\n        if qty1 == \"\":\n            qty1 = b\n        else:\n            qty1 = f'{qty1}{\",\"}{b}'\nqty2 = str(qty1)\n\n\n\n\n\nfrappe.response[\"item\"]=item1\nfrappe.response[\"qty\"]=qty2\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.365610",
  "module": "khetangroup",
  "name": "Delete Multiple logs in employee checkin",
  "reference_doctype": "Employee Checkin",
  "script": "emp_nm = str(doc.employee_name)\nHour = str(doc.hour)\nMinute = str(doc.minute)\nDate = str(doc.date)\ntime = doc.time\nshift = doc.shift\ncompany = doc.company_unit\n\n# # Update Last sync of checkin time in shift type\nif company=='Unit 1':\n    frappe.db.set_value('Shift Type', shift, 'last_sync_of_checkin', time)\nelif company=='Unit 2':\n    max_datetime = frappe.db.get_value(\"Employee Checkin\", filters={'company':\"Unit 2\"}, fieldname=\"max(time)\")\n    frappe.db.set_value('Shift Type', shift, 'last_sync_of_checkin', max_datetime)\n    \n\n# data = frappe.db.get_value('Shift Type', {'name': shift}, ['name', 'last_sync_of_checkin'],as_dict=1)\n# # frappe.msgprint(str(data.last_sync_of_checkin))\n    \n# frappe.db.set_value('Shift Type', shift, 'last_sync_of_checkin', time)\n\n\n\nif company=='Unit 1':\n    \n    data = frappe.db.get_list('Employee Checkin',\n        filters={\n            'employee_name': emp_nm,\n            'hour': Hour,\n            'minute': Minute,\n            'date': Date\n        },\n        fields=['name', 'hour', 'minute', 'date'],limit=1, as_list=True)\n    \n    for x in data:\n        ans = str(x[0])\n        ans_hour = str(x[1])\n        ans_minute = str(x[2])\n        ans_date = str(x[3])\n        # frappe.msgprint(ans)\n        # frappe.msgprint(str(x))\n        # frappe.msgprint(ans_minute)\n        \n        value = frappe.db.get_list('Employee Checkin', \n                filters=[\n                    ['name', 'NOT IN', ans],\n                    ['employee_name', '=', emp_nm],\n                    ['hour', '=', ans_hour],\n                    ['minute', '=', ans_minute],\n                    ['date', '=', ans_date]\n                ], as_list=True)\n        \n        for d in value:\n            new = str(d[0])\n            # frappe.msgprint(new)\n        \n            frappe.delete_doc('Employee Checkin', new)\n        \n        \n    \n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.265385",
  "module": "khetangroup",
  "name": "Split Time and Calculate Overtime",
  "reference_doctype": "Attendance",
  "script": "in_time = str(doc.in_time)\nout_time = str(doc.out_time)\nshift_name = doc.shift\nattendance_name = doc.name\ncompany = doc.company_unit\n\n    \n# For splitting time from in_time and out_time\ntry:\n    new_in_time=in_time.split(\" \")[1:][0]\nexcept IndexError:\n    new_in_time = ''\n  \n    \ntry:\n    new_out_time=out_time.split(\" \")[1:][0]\nexcept IndexError:\n    new_out_time = ''\n    \nfrappe.db.set_value('Attendance', doc.name, 'check_in_time', new_in_time);\nfrappe.db.set_value('Attendance', doc.name, 'check_out_time', new_out_time); \n\n# For getting shift hours\nshift_Hour = frappe.db.get_value('Shift Type', shift_name, ['shift_hours'])\nshift_Hour_Str = str(shift_Hour)\n\n#For calculation of Overtime\nif new_in_time and new_out_time:\n    \n    \n    WorkHours = frappe.utils.time_diff(new_out_time, new_in_time)\n    WorkHours_Str = str(WorkHours)\n    if ' ' in WorkHours_Str:\n        Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n        final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n        # frappe.msgprint(str(final_wh_new))\n        frappe.db.set_value('Attendance', attendance_name, 'new_hours', final_wh_new)\n        \n        if float(final_wh_new) < 4.0 :\n            frappe.db.set_value('Attendance', attendance_name, 'status', 'Half Day')\n        else:\n            frappe.db.set_value('Attendance', attendance_name, 'status', 'Present')\n            \n        \n        if Splitted_WorkHours > shift_Hour_Str:\n            frappe.msgprint(\"Hello\")\n            diff_night = frappe.utils.time_diff(Splitted_WorkHours, shift_Hour_Str)\n            \n            if ',' not in str(diff_night):\n            \n                final_OT_night = frappe.utils.format_time(diff_night,'H.m')\n                \n                frappe.db.set_value('Attendance', attendance_name, 'overtime', final_OT_night)\n            \n                # frappe.msgprint(str(final_OT_night))\n        else:\n            default_OT_night = \"00.00\"\n            \n            frappe.db.set_value('Attendance', attendance_name, 'overtime', default_OT_night)\n            \n       \n        \n        \n    else:\n        final_wh = frappe.utils.format_time(WorkHours,'H.m')\n        # frappe.msgprint(str(final_wh))\n        frappe.db.set_value('Attendance', attendance_name, 'new_hours', final_wh)\n       \n        if float(final_wh) < 4.0 :\n            frappe.db.set_value('Attendance', attendance_name, 'status', 'Half Day')\n        else:\n            frappe.db.set_value('Attendance', attendance_name, 'status', 'Present')\n            \n        if WorkHours > shift_Hour:\n            diff = frappe.utils.time_diff(WorkHours_Str, shift_Hour_Str)\n            \n            if ',' not in str(diff_night):\n            \n                final_OT = frappe.utils.format_time(diff,'H.m')\n                frappe.msgprint(str(diff))\n                frappe.msgprint(str(final_OT))\n                # frappe.msgprint(str(shift_Hour_Str))\n                \n                frappe.db.set_value('Attendance', attendance_name, 'overtime', final_OT)\n                \n                # frappe.msgprint(str(final_OT))\n        else:\n            default_OT = \"00.00\"\n            \n            frappe.db.set_value('Attendance', attendance_name, 'overtime', default_OT)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    # if WorkHours > shift_Hour:\n    #     diff = WorkHours - shift_Hour\n    #     frappe.msgprint(str(diff))\n            \n    #     OverTime = str(diff)\n        \n    #     formatted_OT = frappe.utils.format_time(OverTime)\n    #     final_OT = frappe.utils.format_time(formatted_OT,'H.m')\n    #     # frappe.msgprint(str(OT_Hour))\n    #     # frappe.msgprint(formatted_OT)\n    #     # frappe.msgprint(final_OT)\n        \n    #     frappe.db.set_value('Attendance', attendance_name, 'overtime', final_OT)\n    # else:\n    #     OverTime = \"00.00\"\n    #     frappe.db.set_value('Attendance', attendance_name, 'overtime', OverTime)\n            ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.461105",
  "module": "khetangroup",
  "name": "Set Hour and Minutes in Custom field",
  "reference_doctype": "Employee Checkin",
  "script": "emp_nm = doc.employee_name\nCompany = doc.company\n\n\nans = doc.time\nHour = ans[11]+ans[12]\nMinute = ans[14]+ans[15]\n    \nans_time = frappe.utils.get_time_str(ans)\nans_hour = frappe.utils.format_time(ans_time,'H')\nans_minutes = frappe.utils.format_time(ans_time,'m')\n    \nif ans:\n    ans_date = frappe.utils.get_date_str(ans)\n    doc.date = ans_date\n        \n    doc.hour = ans_hour\n    doc.minute = ans_minutes\n    \n    \n    # frappe.msgprint(ans_hour)\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2023-11-08 16:47:59.393137",
  "module": "khetangroup",
  "name": "Process Auto Attendance",
  "reference_doctype": "Employee Checkin",
  "script": "\"hrms.hr.doctype.shift_type.shift_type.process_auto_attendance_for_all_shifts\"",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.471006",
  "module": "khetangroup",
  "name": "Calculate Overtime in Card Attendance",
  "reference_doctype": "Card Attendance",
  "script": "workingHours = doc.card_working_hours\nstandardHours = doc.standard_working_hours\nName = doc.name;\n\n\nstandardHours_Float = float(doc.standard_working_hours)\nstandardHours_For_OT = standardHours_Float + 1\n\nif workingHours:\n    workingHours_Float = float(doc.card_working_hours)\n    workingHours_Str = str(doc.card_working_hours)\n    \n    # if working hours is integer\n    if '.' not in workingHours_Str:\n        \n        # if working hours is greater then standard hours\n        if workingHours_Float > standardHours_Float :\n            ot = workingHours_Float-standardHours_Float\n            OverTime = ot + 0.0\n            frappe.db.set_value('Card Attendance', Name, 'overtime', OverTime);\n            frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', workingHours_Float);\n        else:\n            frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', workingHours_Float);\n        \n    else:\n        if workingHours_Float > standardHours_Float :\n            OT = workingHours_Float - standardHours_Float\n            OT1 = str(OT)\n            OverTime1 = frappe.format(OT1, {\"fieldtype\": \"Float\", \"precision\": 2})\n            frappe.db.set_value('Card Attendance', Name, 'overtime', OverTime1);\n            \n            if workingHours_Float > standardHours_For_OT:\n                \n                # for converting hours and minutes into hours\n                hour=workingHours_Str.split(\".\")[0]\n                minute=workingHours_Str.split(\".\")[1]\n                \n                new_hour = int(hour) + (int(minute) / 60)\n                tot_Hour = round(new_hour, 1)\n                # frappe.msgprint(str(tot_Hour))\n                frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', tot_Hour);\n            else:\n                hour=workingHours_Str.split(\".\")[0]\n                minute=workingHours_Str.split(\".\")[1]\n                new_hour = float(hour)+0.0\n                frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', new_hour);\n        else:\n            hour=workingHours_Str.split(\".\")[0]\n            minute=workingHours_Str.split(\".\")[1]\n                \n            new_hour = int(hour) + (int(minute) / 60)\n            tot_Hour = round(new_hour, 1)\n            # frappe.msgprint(str(tot_Hour))\n            frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', tot_Hour);\n        \n\n\n\n\n\n\n    \n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-09-22 10:39:04.370416",
  "module": "khetangroup",
  "name": "Auto Shift Detection",
  "reference_doctype": "Employee Checkin",
  "script": "Name = doc.name\nemp = doc.employee\ncompany = doc.company_unit\ncheckin_time = doc.time\n\n\n\ndayShift = frappe.db.get_value('Shift Type', {'company_unit': 'Unit 2','day':1},'name')\n\nnightShift = frappe.db.get_value('Shift Type', {'company_unit': 'Unit 2','night':1},'name')\n# frappe.msgprint(str(nightShift))\n\n\nTime = frappe.utils.get_datetime(checkin_time)\n\ntoday_time = frappe.utils.get_time(checkin_time)\n# today_time_str = frappe.utils.get_time_str(checkin_time)\n\ntoday_date = frappe.utils.get_date_str(checkin_time)\ntoday_date_notstr = Time.date()\ntoday = str(today_date_notstr)\n# frappe.msgprint(str(today_date_notstr))\n\nyesterday_Date = frappe.utils.add_days(today_date, -1)\nyesterday_Date_str = str(yesterday_Date)\n\nans1 = frappe.utils.get_datetime(yesterday_Date)\nans2 = ans1.date()\nans3 = str(ans2)\n# frappe.msgprint(str(ans2))\n\n\ntomorrow_date = frappe.utils.add_days(today_date, 1)\ntomorrow_date_str = str(tomorrow_date)\n\nif company=='Unit 2':\n    \n    # Day Shift Fields\n    dayData = frappe.db.get_value('Shift Type', dayShift, ['start_time','end_time','begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time'])\n    dayStart = dayData[0]\n    day_start_datetime = frappe.utils.format_time(dayStart, \"HH:mm:ss\")\n    dayEnd = dayData[1]\n    day_end_datetime = frappe.utils.format_time(dayEnd, \"HH:mm:ss\")\n    dayBegin = dayData[2]\n    dayAfter = dayData[3]\n    \n    # Night Shift Fields\n    nightData = frappe.db.get_value('Shift Type', nightShift, ['start_time','end_time','begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time'])\n    nightStart = nightData[0]\n    # nightStart_Str = str(nightData[0])\n    night_start_datetime = frappe.utils.format_time(nightStart, \"HH:mm:ss\")\n    nightStart_Str = str(night_start_datetime)\n    nightEnd = nightData[1]\n    # nightEnd_Str = str(nightData[1])\n    night_end_datetime = frappe.utils.format_time(nightEnd, \"HH:mm:ss\")\n    nightEnd_Str = str(night_end_datetime)\n    nightBegin = nightData[2]\n    nightBegin_Str = str(nightBegin)\n    duration_seconds = nightBegin * 60\n    night_Begin = frappe.utils.format_duration(duration_seconds, \"HH:mm:ss\")\n    final_Begin = frappe.utils.format_time(night_Begin, \"HH:mm:ss\")\n    nightAfter = nightData[3]\n    \n    \n    \n    \n    # Night Shift - Actual Start Time and Actual End Time\n    night_start_today = today+\" \"+nightStart_Str\n    night_start_today_formated = frappe.utils.format_datetime(night_start_today,\"YYYY-MM-dd HH:mm:ss\")\n    night_start_today_1 = frappe.utils.add_to_date(night_start_today_formated, minutes=-nightBegin)\n    Final_Night_Start_Today = frappe.utils.format_datetime(night_start_today_1,\"YYYY-MM-dd HH:mm:ss\")\n    # frappe.msgprint(str(Final_Night_Start_Today))\n    \n    night_end_tomorrow = tomorrow_date_str+\" \"+nightEnd_Str\n    night_end_tomorrow_formated = frappe.utils.format_datetime(night_end_tomorrow,\"YYYY-MM-dd HH:mm:ss\")\n    night_end_tomorrow_1 = frappe.utils.add_to_date(night_end_tomorrow_formated, minutes=nightAfter)\n    Final_Night_End_Tomorrow = frappe.utils.format_datetime(night_end_tomorrow_1,\"YYYY-MM-dd HH:mm:ss\")\n    # frappe.msgprint(str(Final_Night_End_Tomorrow))\n    \n    night_end_today = today+\" \"+nightEnd_Str\n    night_end_today_1 = frappe.utils.add_to_date(night_end_today, minutes=nightAfter, as_datetime=True, as_string=True)\n  \n    night_start_yesterday = ans3+\" \"+nightStart_Str\n    night_start_yesterday_1 = frappe.utils.add_to_date(night_start_yesterday, minutes=-nightBegin, as_datetime=True, as_string=True)\n    \n    \n    # Day Shift - Actual Start Time and Actual End Time\n    day_start = today+\" \"+day_start_datetime\n    day_start_formated = frappe.utils.format_datetime(day_start,\"YYYY-MM-dd HH:mm:ss\")\n    day_before = frappe.utils.add_to_date(day_start_formated, minutes=-dayBegin)\n    day_new_before = frappe.utils.format_datetime(day_before,\"YYYY-MM-dd HH:mm:ss\")\n\n   \n    day_end = today_date+' '+day_end_datetime\n    day_start_formated = frappe.utils.format_datetime(day_end,\"YYYY-MM-dd HH:mm:ss\")\n    day_after = frappe.utils.add_to_date(day_end, minutes=dayAfter)\n    day_new_after = frappe.utils.format_datetime(day_after,\"YYYY-MM-dd HH:mm:ss\")\n    \n\n    # Day Shift \n    Day_Start = frappe.utils.get_time(day_new_before)\n    # frappe.msgprint(str(Day_Start))\n    \n    Day_Shift_1 = today_date+' '+day_end_datetime\n    Day_Shift_1_formated = frappe.utils.format_datetime(Day_Shift_1,\"YYYY-MM-dd HH:mm:ss\")\n    Day_Shift_End = frappe.utils.add_to_date(Day_Shift_1_formated, hours=-1.5)\n    Final_Day_End = frappe.utils.format_datetime(Day_Shift_End,\"YYYY-MM-dd HH:mm:ss\")\n    \n    Day_End = frappe.utils.get_time(Final_Day_End)\n    # frappe.msgprint(str(Day_End))\n    \n    \n    # Night Shift \n    Night_Start = frappe.utils.get_time(Final_Night_Start_Today)\n    # frappe.msgprint(str(Night_Start))\n   \n    \n   \n    day_record = frappe.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\":today_date, \"shift\":dayShift, 'log_type':\"IN\"}, fields=['name','shift'])\n    \n    night_record = frappe.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\":yesterday_Date, \"shift\":nightShift, 'log_type':\"IN\"}, fields=['name','shift'])\n    \n    night_record2 = frappe.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\":today_date, \"shift\":nightShift, \"log_type\": \"OUT\"}, fields=['name','shift'])\n    \n    if day_record:\n        Shift = day_record[0].shift\n        doc.shift = Shift\n        doc.log_type = \"OUT\"\n        \n        doc.shift_actual_start = day_new_before\n        doc.shift_actual_end = day_new_after\n        \n        frappe.msgprint(\"One\")\n        \n    elif (night_record and not night_record2):\n        nShift = night_record[0].shift\n        doc.shift = nShift\n        doc.log_type = \"OUT\"\n        \n        doc.shift_actual_start = night_start_yesterday_1\n        doc.shift_actual_end = night_end_today_1\n        \n        frappe.msgprint(\"Two\")\n        \n    else:\n        if Day_Start <= today_time < Day_End:\n            doc.shift = dayShift\n            doc.log_type = \"IN\"\n            doc.shift_actual_start = day_new_before\n            doc.shift_actual_end = day_new_after\n            \n            frappe.msgprint('Three')\n        \n        elif Night_Start <= today_time:\n            doc.shift = nightShift\n            doc.log_type = \"IN\"\n            doc.shift_actual_start = Final_Night_Start_Today\n            doc.shift_actual_end = Final_Night_End_Tomorrow\n            \n            frappe.msgprint('Four')",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-09-18 14:54:24.680722",
  "module": "khetangroup",
  "name": "Update Payment days before saving salary slip",
  "reference_doctype": "Salary Slip",
  "script": "paymentDays = doc.payment_days\nabsentDays = doc.absent_days\nworkingDays = doc.total_working_days\n\nans = workingDays-paymentDays\n# frappe.msgprint(str(ans))\nfrappe.db.set_value('Salary Slip', doc.name, 'absent_days',ans)\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "payment_days",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-09-18 14:54:24.692697",
  "module": "khetangroup",
  "name": "Updation in salary slip",
  "reference_doctype": null,
  "script": "Name=frappe.form_dict['name']\n\n\n\n# frappe.response['message'] = totHours;\n# frappe.response['msgpresnt'] = tot_present;\n# frappe.response['msgabsent'] = absentDays;\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_employee_name",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.443319",
  "module": "khetangroup",
  "name": "get_employee_name",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"employee\"]\n# frappe.msgprint(a)\nemployee = frappe.db.sql(\"\"\" select employee_name from `tabEmployee` where name=%s \"\"\",a)\nemployee1 = \"\"\nfor i in employee:\n    for j in i:\n        if employee1 == \"\":\n            employee1 = j\n        else:\n            employee1 = employee1 + \",\" + j\n            \n# frappe.msgprint(employee1)\nfrappe.response[\"employee\"]=employee1\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-09-22 10:39:14.470829",
  "module": "khetangroup",
  "name": "Update checkin records before auto attendance",
  "reference_doctype": "Attendance",
  "script": "employee = doc.employee\ncheckins = frappe.get_list(\"Employee Checkin\", filters={\"employee\": employee, \"company_unit\":\"Unit 2\"}, fields=[\"name\"], as_list=True)\n\nfor x in checkins:\n    ans = str(x[0])\n    # frappe.msgprint(ans)\n    frappe.db.set_value(\"Employee Checkin\",ans, \"skip_auto_attendance\", 0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# employee = doc.employee\n# company = doc.company\n\n# if company=='SANTOSH UNIT 2':\n#     checkins = frappe.get_list(\"Employee Checkin\", filters={\"employee\": employee}, fields=[\"name\"], as_list=True)\n\n#     for x in checkins:\n#         ans = str(x[0])\n#         # frappe.msgprint(ans)\n#         frappe.db.set_value(\"Employee Checkin\",ans, \"skip_auto_attendance\", 0)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "get_operator_name",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.434071",
  "module": "khetangroup",
  "name": "get_operator_name",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"operator\"]\n# frappe.msgprint(a)\noperator = frappe.db.sql(\"\"\" select employee_name from `tabEmployee` where name=%s \"\"\",a)\noperator1 = \"\"\nfor i in operator:\n    for j in i:\n        if operator1 == \"\":\n            operator1 = j\n        else:\n            operator1 = operator1 + \",\" + j\n            \n# frappe.msgprint(employee1)\nfrappe.response[\"operator\"]=operator1\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "item_types",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.384531",
  "module": "khetangroup",
  "name": "item_types",
  "reference_doctype": null,
  "script": "item_type = frappe.form_dict[\"item_type\"]\n# print(item_type)  # Check the value and type of item_type\n\npipe = frappe.db.get_value('Item Type', item_type, 'pipe')\nsheet = frappe.db.get_value('Item Type', item_type, 'sheets')\nblustor = frappe.db.get_value('Item Type', item_type, 'bluaster')\npillar = frappe.db.get_value('Item Type', item_type, 'pillar')\nitem_202 = frappe.db.get_value('Item Type', item_type, '202')\nitem_304 = frappe.db.get_value('Item Type', item_type, '304')\nitem_316 = frappe.db.get_value('Item Type', item_type, '316')\npipe2 = str(pipe)\nsheet2 = str(sheet)\n\nblustor2 = str(blustor)\npillar2 = str(pillar)\nitem_202_1 = str(item_202)\nitem_304_1 = str(item_304)\nitem_316_1 = str(item_316)\n            \n\n\nfrappe.response[\"pipe\"]=pipe2\nfrappe.response[\"sheet\"]=sheet2\nfrappe.response[\"blustor\"]=blustor2\nfrappe.response[\"pillar\"]=pillar2\nfrappe.response[\"item_202\"]=item_202_1\nfrappe.response[\"item_304\"]=item_304_1\nfrappe.response[\"item_316\"]=item_316_1\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "bulk_payment_method",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.375008",
  "module": "khetangroup",
  "name": "bulk_payment_method",
  "reference_doctype": null,
  "script": "bulk_department = frappe.form_dict[\"name\"]\nlabours = frappe.db.get_value('Department', bulk_department, 'labours')\ncompany_units = frappe.db.get_value('Department', bulk_department, 'company_unit')\nlabours2 = str(labours)\n\nfrappe.response[\"labours\"]=labours2\nfrappe.response[\"company_units\"]=company_units",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.276344",
  "module": "khetangroup",
  "name": "Update Attendance Record for auto shift detection checkin",
  "reference_doctype": "Attendance",
  "script": "emp = doc.employee\nemp_type = doc.employee_type\ncompany = doc.custom_company_unit\nat_date = doc.attendance_date\nShift = doc.shift\nchk_in = doc.in_time\nchk_out = doc.out_time\nwork_hours = doc.new_hours\n\nif chk_in:\n    \n    in_date = frappe.utils.get_date_str(chk_in)\n    in_time_str = frappe.utils.get_time(chk_in)\n    tomorrow_date = frappe.utils.add_days(in_date, 1)\n  \nif chk_out:\n\n    out_date = frappe.utils.get_date_str(chk_out)\n    out_time_str = frappe.utils.get_time(chk_out)\n    yesterday_Date = frappe.utils.add_days(out_date, -1)\n    \nif doc.is_new():\n    \n    # For SANTOSH UNIT 1\n    if company == \"Unit 1\":\n        if emp_type == \"Plant Labours - SU1\":\n            \n            shift_type = frappe.db.get_value('Shift Type', Shift, 'custom_type')\n  \n            if shift_type == \"Day\":\n                \n                # Condition: If Check-In Time exists and Check-Out Time, Work Hours doesn't exists in attendance record\n                if chk_in and not chk_out and not work_hours:\n                    \n                    checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                    # frappe.msgprint(str(checkin_log))\n                    if checkin_log:\n                        first_checkin_name = checkin_log[0][0]\n                        first_checkin_time = checkin_log[0][1]\n                        first_checkin_shift = checkin_log[0][2]\n                        doc.in_time = first_checkin_time\n                        \n                    checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                    if checkout_log:\n                        last_checkout_name = checkout_log[-1][0]\n                        last_checkout_time = checkout_log[-1][1]\n                        doc.out_time = last_checkout_time\n                        \n                    else:\n                        \n                        last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                        last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                        first_checkin_time = doc.in_time\n                        WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                        WorkHours_Str = str(WorkHours)\n                      \n                        if ' ' in WorkHours_Str:\n                            Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                            final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                            doc.new_hours = final_wh_new\n                            doc.custom_remarks = \"No OutPunch\"\n      \n                  \n\n                # Condition: If Check-In Time exists and Check-Out Time, Work Hours doesn't exists in attendance record\n                elif chk_out and not chk_in and not work_hours:\n                    \n                    # doc.custom_test = \"Hello\"\n                    checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\", \"shift\"], as_list=True)\n                    if checkout_log:\n                        last_checkout_name = checkout_log[-1][0]\n                        last_checkout_time = checkout_log[-1][1]\n                        last_checkout_shift = checkout_log[-1][2]\n                        doc.out_time = last_checkout_time\n                        \n                    checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                    if checkin_log:\n                        first_checkin_name = checkin_log[0][0]\n                        first_checkin_time = checkin_log[0][1]\n                        doc.in_time = first_checkin_time\n        \n                    else:\n                        first_chkin = frappe.db.get_value('Shift Type', Shift, 'start_time')\n                        first_chkin_time = frappe.utils.get_time_str(first_chkin)\n                        last_checkout_time = doc.out_time\n                        WorkHours = frappe.utils.time_diff(last_checkout_time, first_chkin_time)\n                        WorkHours_Str = str(WorkHours)\n                      \n                        if ' ' in WorkHours_Str:\n                            Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                            final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                            doc.new_hours = final_wh_new\n                            doc.custom_remarks = \"No OutPunch\"\n                \n                \n                # Condition: If Check-In Time and Check-Out Time exists\n                elif chk_in and chk_out:\n\n                    # Condition: If Attendance Date and Check-In Date or Check-Out Date are not same\n                    if at_date != in_date or at_date != out_date and doc.custom_type == \"Day\":\n                        checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                        if checkin_log:\n                            first_checkin_name = checkin_log[0][0]\n                            first_checkin_time = checkin_log[0][1]\n                            first_checkin_shift = checkin_log[0][2]\n                            doc.in_time = first_checkin_time\n                            \n                        checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                        if checkout_log:\n                            last_checkout_name = checkout_log[-1][0]\n                            last_checkout_time = checkout_log[-1][1]\n                            doc.out_time = last_checkout_time\n                            \n                        else:\n                            \n                            last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                            last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                            first_checkin_time = doc.in_time\n                            WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                            WorkHours_Str = str(WorkHours)\n                          \n                            if ' ' in WorkHours_Str:\n                                Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                                final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                                doc.new_hours = final_wh_new\n                                doc.custom_remarks = \"No OutPunch\"\n                  \n                  \n                    # Condition: If Attendance Date and Check-In Date and Check-Out Date are same                \n                    elif at_date == in_date and at_date == out_date:\n                        \n                        # Condition: If Check-In and Check-Out Time are same in particular date\n                        if in_time_str == out_time_str:\n                            # Count how many records are exists in emp checkin in a particular date\n                            checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                            if checkin_log:\n                                first_checkin_name = checkin_log[0][0]\n                                first_checkin_time = checkin_log[0][1]\n                                first_checkin_shift = checkin_log[0][2]\n                                doc.in_time = first_checkin_time\n                                \n                            checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                            if checkout_log:\n                                last_checkout_name = checkout_log[-1][0]\n                                last_checkout_time = checkout_log[-1][1]\n                                doc.out_time = last_checkout_time\n                                \n                            else:\n                                \n                                last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                                last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                                first_checkin_time = doc.in_time\n                                WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                                WorkHours_Str = str(WorkHours)\n                              \n                                if ' ' in WorkHours_Str:\n                                    Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                                    final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                                    doc.new_hours = final_wh_new\n                                    doc.custom_remarks = \"No OutPunch\"\n\n            \n            \n            # For Night Shift\n            if shift_type == \"Night\":\n                \n            # Condition: If Check-In Time exists and Check-Out Time and Work Hours don't exist in the attendance record\n                if chk_in and not chk_out and not work_hours:\n                    checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": [\"between\", [at_date, tomorrow_date]], \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                    if checkin_log:\n                        first_checkin_name = checkin_log[0][0]\n                        first_checkin_time = checkin_log[0][1]\n                        first_checkin_shift = checkin_log[0][2]\n                        doc.in_time = first_checkin_time\n                                \n                    checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": [\"between\", [at_date, tomorrow_date]], \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                    if checkout_log:\n                        last_checkout_name = checkout_log[-1][0]\n                        last_checkout_time = checkout_log[-1][1]\n                        doc.out_time = last_checkout_time\n                                \n                    else:\n                        \n                        last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                        last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                        first_checkin_time = doc.in_time\n                        WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                        WorkHours_Str = str(WorkHours)\n                              \n                        if ' ' in WorkHours_Str:\n                            Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                            final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                            doc.new_hours = final_wh_new\n                            doc.custom_remarks = \"No OutPunch\"\n                            \n        elif emp_type == \"Office Staff - SU1\" or emp_type == \"Plant Staff - SU1\":\n            if chk_in and not chk_out and not work_hours:\n                checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                # frappe.msgprint(str(checkin_log))\n                if checkin_log:\n                    first_checkin_name = checkin_log[0][0]\n                    first_checkin_time = checkin_log[0][1]\n                    first_checkin_shift = checkin_log[0][2]\n                    doc.in_time = first_checkin_time\n                    \n                checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                if checkout_log:\n                    last_checkout_name = checkout_log[-1][0]\n                    last_checkout_time = checkout_log[-1][1]\n                    doc.out_time = last_checkout_time\n                    \n                else:\n                    \n                    last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                    last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                    first_checkin_time = doc.in_time\n                    WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                    WorkHours_Str = str(WorkHours)\n                  \n                    if ' ' in WorkHours_Str:\n                        Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                        final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                        doc.new_hours = final_wh_new\n                        doc.custom_remarks = \"No OutPunch\"\n            \n\n\n\n    # For SANTOSH UNIT 2\n    if company == \"Unit 2\":\n        \n        shift_type = frappe.db.get_value('Shift Type', Shift, 'custom_type')\n        # frappe.msgprint(str(shift_type))\n            \n        # if doc.shift == \"Day Shift - SU2\":\n        if shift_type == \"Day\":\n                \n            # Condition: If Check-In Time exists and Check-Out Time, Work Hours doesn't exists in attendance record\n            if chk_in and not chk_out and not work_hours:\n                \n                checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                if checkin_log:\n                    first_checkin_name = checkin_log[0][0]\n                    first_checkin_time = checkin_log[0][1]\n                    first_checkin_shift = checkin_log[0][2]\n                    doc.in_time = first_checkin_time\n                    \n                checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                if checkout_log:\n                    last_checkout_name = checkout_log[-1][0]\n                    last_checkout_time = checkout_log[-1][1]\n                    doc.out_time = last_checkout_time\n                    \n                else:\n                    \n                    last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                    last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                    first_checkin_time = doc.in_time\n                    WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                    WorkHours_Str = str(WorkHours)\n                  \n                    if ' ' in WorkHours_Str:\n                        Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                        final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                        doc.new_hours = final_wh_new\n                        doc.custom_remarks = \"No OutPunch\"\n  \n              \n\n            # Condition: If Check-In Time exists and Check-Out Time, Work Hours doesn't exists in attendance record\n            elif chk_out and not chk_in and not work_hours:\n                \n                # doc.custom_test = \"Hello\"\n                checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\", \"shift\"], as_list=True)\n                if checkout_log:\n                    last_checkout_name = checkout_log[-1][0]\n                    last_checkout_time = checkout_log[-1][1]\n                    last_checkout_shift = checkout_log[-1][2]\n                    doc.out_time = last_checkout_time\n                    \n                checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                if checkin_log:\n                    first_checkin_name = checkin_log[0][0]\n                    first_checkin_time = checkin_log[0][1]\n                    doc.in_time = first_checkin_time\n    \n                else:\n                   \n                    first_chkin = frappe.db.get_value('Shift Type', Shift, 'start_time')\n                    first_chkin_time = frappe.utils.get_time_str(first_chkin)\n                    last_checkout_time = doc.out_time\n                    WorkHours = frappe.utils.time_diff(last_checkout_time, first_chkin_time)\n                    WorkHours_Str = str(WorkHours)\n                  \n                    if ' ' in WorkHours_Str:\n                        Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                        final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                        doc.new_hours = final_wh_new\n                        doc.custom_remarks = \"No OutPunch\"\n            \n            \n            # Condition: If Check-In Time and Check-Out Time exists\n            elif chk_in and chk_out:\n\n                # Condition: If Attendance Date and Check-In Date or Check-Out Date are not same\n                if at_date != in_date or at_date != out_date and doc.custom_type == \"Day\":\n                    checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                    if checkin_log:\n                        first_checkin_name = checkin_log[0][0]\n                        first_checkin_time = checkin_log[0][1]\n                        first_checkin_shift = checkin_log[0][2]\n                        doc.in_time = first_checkin_time\n                        \n                    checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                    if checkout_log:\n                        last_checkout_name = checkout_log[-1][0]\n                        last_checkout_time = checkout_log[-1][1]\n                        doc.out_time = last_checkout_time\n                        \n                    else:\n                       \n                        last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                        last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                        first_checkin_time = doc.in_time\n                        WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                        WorkHours_Str = str(WorkHours)\n                      \n                        if ' ' in WorkHours_Str:\n                            Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                            final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                            doc.new_hours = final_wh_new\n                            doc.custom_remarks = \"No OutPunch\"\n              \n              \n                # Condition: If Attendance Date and Check-In Date and Check-Out Date are same                \n                elif at_date == in_date and at_date == out_date:\n                    \n                    # Condition: If Check-In and Check-Out Time are same in particular date\n                    if in_time_str == out_time_str:\n                        # Count how many records are exists in emp checkin in a particular date\n                        checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                        if checkin_log:\n                            first_checkin_name = checkin_log[0][0]\n                            first_checkin_time = checkin_log[0][1]\n                            first_checkin_shift = checkin_log[0][2]\n                            doc.in_time = first_checkin_time\n                            \n                        checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                        if checkout_log:\n                            last_checkout_name = checkout_log[-1][0]\n                            last_checkout_time = checkout_log[-1][1]\n                            doc.out_time = last_checkout_time\n                            \n                        else:\n                            \n                            last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                            last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                            first_checkin_time = doc.in_time\n                            WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                            WorkHours_Str = str(WorkHours)\n                          \n                            if ' ' in WorkHours_Str:\n                                Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                                final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                                doc.new_hours = final_wh_new\n                                doc.custom_remarks = \"No OutPunch\"\n\n            \n            \n        # For Night Shift\n        if shift_type == \"Night\":\n            \n        # Condition: If Check-In Time exists and Check-Out Time and Work Hours don't exist in the attendance record\n            if chk_in and not chk_out and not work_hours:\n                checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": [\"between\", [at_date, tomorrow_date]], \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                if checkin_log:\n                    first_checkin_name = checkin_log[0][0]\n                    first_checkin_time = checkin_log[0][1]\n                    first_checkin_shift = checkin_log[0][2]\n                    doc.in_time = first_checkin_time\n                            \n                checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": [\"between\", [at_date, tomorrow_date]], \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                if checkout_log:\n                    last_checkout_name = checkout_log[-1][0]\n                    last_checkout_time = checkout_log[-1][1]\n                    doc.out_time = last_checkout_time\n                            \n                else:\n                   \n                    last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                    last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                    first_checkin_time = doc.in_time\n                    WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                    WorkHours_Str = str(WorkHours)\n                          \n                    if ' ' in WorkHours_Str:\n                        Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                        final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                        doc.new_hours = final_wh_new\n                        doc.custom_remarks = \"No OutPunch\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.304148",
  "module": "khetangroup",
  "name": "Auto Shift Detection for both Units",
  "reference_doctype": "Employee Checkin",
  "script": "Name = doc.name\nemp = doc.employee\ncompany = doc.company_unit\ncheckin_time = doc.time\nemp_type = doc.employee_type\n\nTime = frappe.utils.get_datetime(checkin_time)\n\ntoday_time = frappe.utils.get_time(checkin_time)\n\ntoday_date = frappe.utils.get_date_str(checkin_time)\ntoday_date_notstr = Time.date()\ntoday = str(today_date_notstr)\n\nyesterday_Date = frappe.utils.add_days(today_date, -1)\nyesterday_Date_str = str(yesterday_Date)\n\nans1 = frappe.utils.get_datetime(yesterday_Date)\nans2 = ans1.date()\nans3 = str(ans2)\n\ntomorrow_date = frappe.utils.add_days(today_date, 1)\ntomorrow_date_str = str(tomorrow_date)\n\n\nif company=='Unit 1':\n    \n    if emp_type == \"Plant Labours - SU1\":\n        \n        #Fetch latest Shift Assignment record of employee\n        shift_assign_day_1 = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp, \"custom_type\": \"Day\"}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n        shift_assign_night_1 = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp, \"custom_type\": \"Night\"}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n        \n        if shift_assign_day_1:\n            dayShift_1 = shift_assign_day_1[0].shift_type\n        if shift_assign_night_1:\n            nightShift_1 = shift_assign_night_1[0].shift_type\n            \n        if dayShift_1 or nightShift_1:\n            \n            # Day Shift Fields\n            dayData = frappe.db.get_value('Shift Type', dayShift_1, ['start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time', 'shift_hours'])\n            \n            #Start time of Shift\n            dayStart = dayData[0]\n            day_start_datetime = frappe.utils.format_time(dayStart, \"HH:mm:ss\")\n            \n            #End time of Shift\n            dayEnd = dayData[1]\n            day_end_datetime = frappe.utils.format_time(dayEnd, \"HH:mm:ss\")\n            \n            #Before Checkin and After Checkout time\n            dayBegin = dayData[2]\n            dayAfter = dayData[3]\n            \n            #Shift hours and calculate half day time of shift\n            day_shift_hour = dayData[4]\n            day_half = day_shift_hour/2\n            if day_half:\n                parsed_day_time = frappe.utils.get_time(day_half)\n                day_half_hour = parsed_day_time.hour\n                \n                \n            # Night Shift Fields\n            nightData = frappe.db.get_value('Shift Type', nightShift_1, ['start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time', 'shift_hours'])\n            \n            #Start time of Shift\n            nightStart = nightData[0]\n            night_start_datetime = frappe.utils.format_time(nightStart, \"HH:mm:ss\")\n            nightStart_Str = str(night_start_datetime)\n            \n            #End time of Shift\n            nightEnd = nightData[1]\n            night_end_datetime = frappe.utils.format_time(nightEnd, \"HH:mm:ss\")\n            nightEnd_Str = str(night_end_datetime)\n            \n            #Before Checkin and After Checkout time\n            nightBegin = nightData[2]\n            nightBegin_Str = str(nightBegin)\n            duration_seconds = nightBegin * 60\n            night_Begin = frappe.utils.format_duration(duration_seconds, \"HH:mm:ss\")\n            final_Begin = frappe.utils.format_time(night_Begin, \"HH:mm:ss\")\n            nightAfter = nightData[3]\n            \n            #Shift hours and calculate half day time of shift\n            night_shift_hour = nightData[4]\n            night_half = night_shift_hour/2\n            if night_half:\n                parsed_night_time = frappe.utils.get_time(day_half)\n                night_half_hour = parsed_night_time.hour\n            \n            \n            \n            # Day Shift - Actual Start Time and Actual End Time\n            day_start = today+\" \"+day_start_datetime\n            day_start_formated = frappe.utils.format_datetime(day_start,\"YYYY-MM-dd HH:mm:ss\")\n            day_before = frappe.utils.add_to_date(day_start_formated, minutes=-dayBegin)\n            Day_Actual_Start = frappe.utils.get_datetime(day_before)\n            # Day_Actual_Start = frappe.utils.format_datetime(day_before,\"YYYY-MM-dd HH:mm:ss\")\n            # Day_Actual_Start = frappe.utils.get_time(day_new_before)\n            \n            day_end = today+\" \"+day_end_datetime\n            day_end_formatted = frappe.utils.format_datetime(day_end,\"YYYY-MM-dd HH:mm:ss\")\n            day_after = frappe.utils.add_to_date(day_end_formatted, minutes=dayAfter)\n            Day_Actual_End = frappe.utils.get_datetime(day_after)\n            # Day_Actual_End = frappe.utils.format_datetime(day_after,\"YYYY-MM-dd HH:mm:ss\")\n            # Day_Actual_End = frappe.utils.get_time(day_new_after)\n            \n            # Day Shift - Allow checkin before half day time\n            day_half_datetime = frappe.utils.add_to_date(day_start_formated, hours=day_half_hour)\n            Allow_Chkin_Day_Half = frappe.utils.get_datetime(day_half_datetime)\n            # Allow_Chkin_Day_Half = frappe.utils.format_datetime(day_half_datetime,\"YYYY-MM-dd HH:mm:ss\")\n            \n            \n            \n            # Night Shift - Actual Start Time and Actual End Time\n            night_start_today = today+\" \"+nightStart_Str\n            night_start_today_formated = frappe.utils.format_datetime(night_start_today,\"YYYY-MM-dd HH:mm:ss\")\n            night_start_today_1 = frappe.utils.add_to_date(night_start_today_formated, minutes=-nightBegin)\n            Actual_Night_Start_Today = frappe.utils.get_datetime(night_start_today_1)\n            # Actual_Night_Start_Today = frappe.utils.format_datetime(night_start_today_1,\"YYYY-MM-dd HH:mm:ss\")\n            \n            night_end_tomorrow = tomorrow_date_str+\" \"+nightEnd_Str\n            night_end_tomorrow_formated = frappe.utils.format_datetime(night_end_tomorrow,\"YYYY-MM-dd HH:mm:ss\")\n            night_end_tomorrow_1 = frappe.utils.add_to_date(night_end_tomorrow_formated, minutes=nightAfter)\n            Actual_Night_End_Tomorrow = frappe.utils.get_datetime(night_end_tomorrow_1)\n            # Actual_Night_End_Tomorrow = frappe.utils.format_datetime(night_end_tomorrow_1,\"YYYY-MM-dd HH:mm:ss\")\n            \n            night_start_yesterday = ans3+\" \"+nightStart_Str\n            night_start_yesterday_1 = frappe.utils.add_to_date(night_start_yesterday, minutes=-nightBegin, as_datetime=True, as_string=True)\n            Actual_Night_Start_Yesterday = frappe.utils.get_datetime(night_start_yesterday_1)\n            # Actual_Night_Start_Yesterday = frappe.utils.format_datetime(night_start_yesterday_1,\"YYYY-MM-dd HH:mm:ss\")\n             \n            night_end_today = today+\" \"+nightEnd_Str\n            night_end_today_1 = frappe.utils.add_to_date(night_end_today, minutes=nightAfter, as_datetime=True, as_string=True)\n            Actual_Night_End_Today = frappe.utils.get_datetime(night_end_today_1)\n            # Actual_Night_End_Today = frappe.utils.format_datetime(night_end_today_1,\"YYYY-MM-dd HH:mm:ss\")\n            \n            # Night Shift - Allow checkin before half night time\n            night_half_datetime = frappe.utils.add_to_date(night_start_today_formated, hours=night_half_hour)\n            Allow_Chkin_Night_Half = frappe.utils.get_datetime(night_half_datetime)\n            # Allow_Chkin_Night_Half = frappe.utils.format_datetime(night_half_datetime,\"YYYY-MM-dd HH:mm:ss\")\n            \n            \n            \n            day_record_in = frappe.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\":today_date, \"shift\":dayShift_1, 'log_type':\"IN\"}, fields=['name','shift'])\n            \n            night_record_yesterday_in = frappe.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\":yesterday_Date, \"shift\":nightShift_1, 'log_type':\"IN\"}, fields=['name','shift'])\n            \n            night_record_today_out = frappe.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\":today_date, \"shift\":nightShift_1, \"log_type\": \"OUT\"}, fields=['name','shift'])\n            \n            if day_record_in:\n                Shift = day_record_in[0].shift\n                doc.shift = Shift\n                doc.log_type = \"OUT\"\n                doc.shift_actual_start = Day_Actual_Start\n                doc.shift_actual_end = Day_Actual_End\n                \n                frappe.msgprint(\"One\")\n                \n            elif (night_record_yesterday_in and not night_record_today_out):\n                nShift = night_record_yesterday_in[0].shift\n            \n                Shift_End = frappe.db.get_value('Employee Checkin', night_record_yesterday_in, 'shift_actual_end')\n                \n                # frappe.msgprint(str(Time))\n                # frappe.msgprint(str(Shift_End))\n                if Shift_End:\n                    \n                    if Time < Shift_End:\n    \n                        doc.shift = nShift\n                        doc.log_type = \"OUT\"\n                        doc.shift_actual_start = Actual_Night_Start_Yesterday\n                        doc.shift_actual_end = Actual_Night_End_Today\n                        \n                        frappe.msgprint(\"Two\")\n                        \n                    else:\n                        if Day_Actual_Start <= Time < Allow_Chkin_Day_Half:\n                            doc.shift = dayShift_1\n                            doc.log_type = \"IN\"\n                            doc.shift_actual_start = Day_Actual_Start\n                            doc.shift_actual_end = Day_Actual_End\n                            \n                            frappe.msgprint('Two - Day')\n                    \n                        elif Actual_Night_Start_Today <= Time:\n                            doc.shift = nightShift_1\n                            doc.log_type = \"IN\"\n                            doc.shift_actual_start = Actual_Night_Start_Today\n                            doc.shift_actual_end = Actual_Night_End_Tomorrow\n                            \n                            frappe.msgprint('Two - Night')\n                \n            else:\n                if Day_Actual_Start <= Time < Allow_Chkin_Day_Half:\n                    doc.shift = dayShift_1\n                    doc.log_type = \"IN\"\n                    doc.shift_actual_start = Day_Actual_Start\n                    doc.shift_actual_end = Day_Actual_End\n                        \n                    frappe.msgprint('Three')\n                \n                elif Actual_Night_Start_Today <= Time:\n                    doc.shift = nightShift_1\n                    doc.log_type = \"IN\"\n                    doc.shift_actual_start = Actual_Night_Start_Today\n                    doc.shift_actual_end = Actual_Night_End_Tomorrow\n                        \n                    frappe.msgprint('Four')\n            \n            \nif company=='Unit 2':\n    \n    #Fetch latest Shift Assignment record of employee\n    shift_assign_day_2 = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp, \"custom_type\": \"Day\"}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n    shift_assign_night_2 = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp, \"custom_type\": \"Night\"}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n        \n    if shift_assign_day_2:\n        dayShift_2 = shift_assign_day_2[0].shift_type\n    if shift_assign_night_2:\n        nightShift_2 = shift_assign_night_2[0].shift_type\n        \n\n    if dayShift_2 or nightShift_2:\n        \n        # Day Shift Fields\n        dayData = frappe.db.get_value('Shift Type', dayShift_2, ['start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time', 'shift_hours'])\n        \n        #Start time of Shift\n        dayStart = dayData[0]\n        day_start_datetime = frappe.utils.format_time(dayStart, \"HH:mm:ss\")\n        \n        #End time of Shift\n        dayEnd = dayData[1]\n        day_end_datetime = frappe.utils.format_time(dayEnd, \"HH:mm:ss\")\n        \n        #Before Checkin and After Checkout time\n        dayBegin = dayData[2]\n        dayAfter = dayData[3]\n        \n        #Shift hours and calculate half day time of shift\n        day_shift_hour = dayData[4]\n        day_half = day_shift_hour/2\n        if day_half:\n            parsed_day_time = frappe.utils.get_time(day_half)\n            day_half_hour = parsed_day_time.hour\n            \n            \n        # Night Shift Fields\n        nightData = frappe.db.get_value('Shift Type', nightShift_2, ['start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time', 'shift_hours'])\n        \n        #Start time of Shift\n        nightStart = nightData[0]\n        night_start_datetime = frappe.utils.format_time(nightStart, \"HH:mm:ss\")\n        nightStart_Str = str(night_start_datetime)\n        \n        #End time of Shift\n        nightEnd = nightData[1]\n        night_end_datetime = frappe.utils.format_time(nightEnd, \"HH:mm:ss\")\n        nightEnd_Str = str(night_end_datetime)\n        \n        #Before Checkin and After Checkout time\n        nightBegin = nightData[2]\n        nightBegin_Str = str(nightBegin)\n        duration_seconds = nightBegin * 60\n        night_Begin = frappe.utils.format_duration(duration_seconds, \"HH:mm:ss\")\n        final_Begin = frappe.utils.format_time(night_Begin, \"HH:mm:ss\")\n        nightAfter = nightData[3]\n        \n        #Shift hours and calculate half day time of shift\n        night_shift_hour = nightData[4]\n        night_half = night_shift_hour/2\n        if night_half:\n            parsed_night_time = frappe.utils.get_time(day_half)\n            night_half_hour = parsed_night_time.hour\n        \n        \n        \n        # Day Shift - Actual Start Time and Actual End Time\n        day_start = today+\" \"+day_start_datetime\n        day_start_formated = frappe.utils.format_datetime(day_start,\"YYYY-MM-dd HH:mm:ss\")\n        day_before = frappe.utils.add_to_date(day_start_formated, minutes=-dayBegin)\n        Day_Actual_Start = frappe.utils.get_datetime(day_before)\n        # Day_Actual_Start = frappe.utils.format_datetime(day_before,\"YYYY-MM-dd HH:mm:ss\")\n        # Day_Actual_Start = frappe.utils.get_time(day_new_before)\n        \n        day_end = today+\" \"+day_end_datetime\n        day_end_formatted = frappe.utils.format_datetime(day_end,\"YYYY-MM-dd HH:mm:ss\")\n        day_after = frappe.utils.add_to_date(day_end_formatted, minutes=dayAfter)\n        Day_Actual_End = frappe.utils.get_datetime(day_after)\n        # Day_Actual_End = frappe.utils.format_datetime(day_after,\"YYYY-MM-dd HH:mm:ss\")\n        # Day_Actual_End = frappe.utils.get_time(day_new_after)\n        \n        # Day Shift - Allow checkin before half day time\n        day_half_datetime = frappe.utils.add_to_date(day_start_formated, hours=day_half_hour)\n        Allow_Chkin_Day_Half = frappe.utils.get_datetime(day_half_datetime)\n        # Allow_Chkin_Day_Half = frappe.utils.format_datetime(day_half_datetime,\"YYYY-MM-dd HH:mm:ss\")\n        \n        \n        \n        # Night Shift - Actual Start Time and Actual End Time\n        night_start_today = today+\" \"+nightStart_Str\n        night_start_today_formated = frappe.utils.format_datetime(night_start_today,\"YYYY-MM-dd HH:mm:ss\")\n        night_start_today_1 = frappe.utils.add_to_date(night_start_today_formated, minutes=-nightBegin)\n        Actual_Night_Start_Today = frappe.utils.get_datetime(night_start_today_1)\n        # Actual_Night_Start_Today = frappe.utils.format_datetime(night_start_today_1,\"YYYY-MM-dd HH:mm:ss\")\n        \n        night_end_tomorrow = tomorrow_date_str+\" \"+nightEnd_Str\n        night_end_tomorrow_formated = frappe.utils.format_datetime(night_end_tomorrow,\"YYYY-MM-dd HH:mm:ss\")\n        night_end_tomorrow_1 = frappe.utils.add_to_date(night_end_tomorrow_formated, minutes=nightAfter)\n        Actual_Night_End_Tomorrow = frappe.utils.get_datetime(night_end_tomorrow_1)\n        # Actual_Night_End_Tomorrow = frappe.utils.format_datetime(night_end_tomorrow_1,\"YYYY-MM-dd HH:mm:ss\")\n        \n        night_start_yesterday = ans3+\" \"+nightStart_Str\n        night_start_yesterday_1 = frappe.utils.add_to_date(night_start_yesterday, minutes=-nightBegin, as_datetime=True, as_string=True)\n        Actual_Night_Start_Yesterday = frappe.utils.get_datetime(night_start_yesterday_1)\n        # Actual_Night_Start_Yesterday = frappe.utils.format_datetime(night_start_yesterday_1,\"YYYY-MM-dd HH:mm:ss\")\n         \n        night_end_today = today+\" \"+nightEnd_Str\n        night_end_today_1 = frappe.utils.add_to_date(night_end_today, minutes=nightAfter, as_datetime=True, as_string=True)\n        Actual_Night_End_Today = frappe.utils.get_datetime(night_end_today_1)\n        # Actual_Night_End_Today = frappe.utils.format_datetime(night_end_today_1,\"YYYY-MM-dd HH:mm:ss\")\n        \n        # Night Shift - Allow checkin before half night time\n        night_half_datetime = frappe.utils.add_to_date(night_start_today_formated, hours=night_half_hour)\n        Allow_Chkin_Night_Half = frappe.utils.get_datetime(night_half_datetime)\n        # Allow_Chkin_Night_Half = frappe.utils.format_datetime(night_half_datetime,\"YYYY-MM-dd HH:mm:ss\")\n        \n        \n        \n        day_record_in = frappe.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\":today_date, \"shift\":dayShift_2, 'log_type':\"IN\"}, fields=['name','shift'])\n        \n        night_record_yesterday_in = frappe.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\":yesterday_Date, \"shift\":nightShift_2, 'log_type':\"IN\"}, fields=['name','shift'])\n        \n        night_record_today_out = frappe.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\":today_date, \"shift\":nightShift_2, \"log_type\": \"OUT\"}, fields=['name','shift'])\n        \n        if day_record_in:\n            Shift = day_record_in[0].shift\n            doc.shift = Shift\n            doc.log_type = \"OUT\"\n            doc.shift_actual_start = Day_Actual_Start\n            doc.shift_actual_end = Day_Actual_End\n            \n            frappe.msgprint(\"One\")\n            \n        elif (night_record_yesterday_in and not night_record_today_out):\n            nShift = night_record_yesterday_in[0].shift\n        \n            Shift_End = frappe.db.get_value('Employee Checkin', night_record_yesterday_in, 'shift_actual_end')\n            if Time < Shift_End:\n\n                doc.shift = nShift\n                doc.log_type = \"OUT\"\n                doc.shift_actual_start = Actual_Night_Start_Yesterday\n                doc.shift_actual_end = Actual_Night_End_Today\n                \n                frappe.msgprint(\"Two\")\n                \n            else:\n                if Day_Actual_Start <= Time < Allow_Chkin_Day_Half:\n                    doc.shift = dayShift_1\n                    doc.log_type = \"IN\"\n                    doc.shift_actual_start = Day_Actual_Start\n                    doc.shift_actual_end = Day_Actual_End\n                    \n                    frappe.msgprint('Two - Day')\n            \n                elif Actual_Night_Start_Today <= Time:\n                    doc.shift = nightShift_1\n                    doc.log_type = \"IN\"\n                    doc.shift_actual_start = Actual_Night_Start_Today\n                    doc.shift_actual_end = Actual_Night_End_Tomorrow\n                    \n                    frappe.msgprint('Two - Night')\n        \n        else:\n            if Day_Actual_Start <= Time < Allow_Chkin_Day_Half:\n                doc.shift = dayShift_1\n                doc.log_type = \"IN\"\n                doc.shift_actual_start = Day_Actual_Start\n                doc.shift_actual_end = Day_Actual_End\n                    \n                frappe.msgprint('Three')\n            \n            elif Actual_Night_Start_Today <= Time:\n                doc.shift = nightShift_1\n                doc.log_type = \"IN\"\n                doc.shift_actual_start = Actual_Night_Start_Today\n                doc.shift_actual_end = Actual_Night_End_Tomorrow\n                    \n                frappe.msgprint('Four')\n            \n            \n            \n             \n             \n             \n             \n             \n             \n             \n            \n            ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "barcode",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-08 16:47:59.246086",
  "module": "khetangroup",
  "name": "barcode",
  "reference_doctype": null,
  "script": "item_code = frappe.form_dict[\"item_code\"]\nuom_details = frappe.get_all('UOM Conversion Detail', filters={'parent': item_code, 'conversion_factor': ('!=', 1)}, fields='uom')\n\nfrappe.response[\"uom_details\"] =uom_details",
  "script_type": "API"
 }
]